package com.cost168.costaudit.controller.yaohao;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cost168.costaudit.pojo.sys.SysUser;
import com.cost168.costaudit.pojo.yaohao.YaohaoPunish;
import com.cost168.costaudit.service.cost.CostEnterpriseRecordService;
import com.cost168.costaudit.service.yaohao.YaohaoPunishService;
import com.cost168.costaudit.shiro.shiroUtil;
import com.cost168.costaudit.utils.EUDataGridResult;
import com.cost168.costaudit.utils.GlobalResult;
import com.cost168.costaudit.utils.JsonUtils;

@Controller
@RequestMapping("/yaohaoPunish")
public class YaohaoPunishController {
	
	@Autowired
	private YaohaoPunishService yaohaoPunishService;
	@Autowired
	private CostEnterpriseRecordService costEnterpriseRecordService;

	private final Logger logger = LogManager.getLogger(YaohaoPunishController.class);

	
	
	@RequestMapping("/toPunishList")
	public String toEnterpriseList(HttpServletRequest request){
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String currentDate = sdf.format(new Date());
        String currentYear = currentDate.substring(0, 4);
        String entYear="";
		String year=costEnterpriseRecordService.selectYearList();
		if(null!=year && !"".equals(year)){
			entYear=year;
		}else{
			entYear=currentYear;
		}
		request.setAttribute("entYear", entYear);
		request.setAttribute("currentYear", currentYear);
		return "yaohao/punish/punishList";
	}
	
	@ResponseBody
	@RequestMapping("/list")
	public EUDataGridResult list(HttpServletRequest request,YaohaoPunish yaohaoPunish, int page, int rows){
		EUDataGridResult result=new EUDataGridResult();
		Map<String,Object> map=new HashMap<String,Object>();
		try {
			Map<String,Object> selectMap=JsonUtils.object2Map(yaohaoPunish);
			map.put("isPage", true);
		    map.put("curPage", rows*(page-1));
		    map.put("pageSize", rows);
		    map.putAll(selectMap);
		    List<YaohaoPunish> list= yaohaoPunishService.selectListByMap(map);
		    int total= yaohaoPunishService.selectCountByMap(map);
			result.setRows(list);
			result.setTotal(total);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	
	@ResponseBody
	@RequestMapping("/listTz")
	public EUDataGridResult listTz(HttpServletRequest request,YaohaoPunish yaohaoPunish, int page, int rows){
		EUDataGridResult result=new EUDataGridResult();
		Map<String,Object> map=new HashMap<String,Object>();
		try {
			Map<String,Object> selectMap=JsonUtils.object2Map(yaohaoPunish);
			map.putAll(selectMap);
			map.put("isPage", true);
		    map.put("curPage", rows*(page-1));
		    map.put("pageSize", rows);
		    List<YaohaoPunish> list= yaohaoPunishService.selectListTzByMap(map);
		    int total= yaohaoPunishService.selectCountTzByMap(map);
			result.setRows(list);
			result.setTotal(total);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	
	@RequestMapping("/toEdit")
	public String toEdit(HttpServletRequest request){
		String pUrl="";
		String id=request.getParameter("id");
		if(null!=id && !"".equals(id)) {
			pUrl="/yaohaoPunish/upd";
			YaohaoPunish yaohaoPunish = yaohaoPunishService.selectByPrimaryKey(id);
			request.setAttribute("obj", yaohaoPunish);
		}else{
			pUrl="/yaohaoPunish/save";
			YaohaoPunish yaohaoPunish=new YaohaoPunish();
			request.setAttribute("obj", yaohaoPunish);
		}
		request.setAttribute("pUrl", pUrl);
		return "enterprise/rewardsPunishRecord";
	}
	
	@ResponseBody
	@RequestMapping("/save")
	public GlobalResult save(HttpServletRequest request,YaohaoPunish yaohaoPunish){
		GlobalResult result=new GlobalResult();
		try {
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
			String punishTime =request.getParameter("punishTimeStr");
			String start=punishTime.substring(0, 10); 
			String end=punishTime.substring(punishTime.length()-10, punishTime.length());
			SysUser currentUser=shiroUtil.getInstance().currentUser();
			yaohaoPunish.setExecuteStartTime(sdf.parse(start));
			yaohaoPunish.setExecuteEndTime(sdf.parse(end));
			if(null!=yaohaoPunish.getId() && !"".equals(yaohaoPunish.getId())){
				int u=yaohaoPunishService.updateByPrimaryKeySelective(yaohaoPunish);
				if(u<=0){
					logger.error("更新异常!");
				}
			}else{
				yaohaoPunish.setCreater(currentUser.getName());
				yaohaoPunish.setCreareTime(new Date());
				if(null!=yaohaoPunish.getCreateTimeStr() && !"".equals(yaohaoPunish.getCreateTimeStr())){
					yaohaoPunish.setCreareTime(sdf.parse(yaohaoPunish.getCreateTimeStr()));
				}
				String id=UUID.randomUUID().toString().replace("-", "");
				yaohaoPunish.setId(id);
				int i=yaohaoPunishService.insertSelective(yaohaoPunish);
				if(i<=0){
					logger.error("插入异常!");
				}
			}
			result.setStatus(200);
		} catch (Exception e) {
			e.printStackTrace();
			result.setStatus(500);
		}
		return result;
	}
	
	@ResponseBody
	@RequestMapping("/upd")
	public GlobalResult upd(HttpServletRequest request,YaohaoPunish yaohaoPunish){
		GlobalResult result=new GlobalResult();
		try {
			yaohaoPunishService.updateByPrimaryKeySelective(yaohaoPunish);
			result.setStatus(200);
		} catch (Exception e) {
			e.printStackTrace();
			result.setStatus(500);
		}
		return result;
	}
	
	@ResponseBody
	@RequestMapping("/delete")
	public GlobalResult deleteProject(HttpServletRequest request) {
		GlobalResult result=new GlobalResult();
		String ids=request.getParameter("ids");
		try {
			if(null!=ids && !"".equals(ids)){
				String arr[]=ids.split(",");
				for(String i:arr){
					if(i!=null && !"".equals(i)){
						yaohaoPunishService.deleteByPrimaryKey(i);
					}
				}
			}
			result.setStatus(200);
		} catch (Exception e) {
			e.printStackTrace();
			result.setStatus(500);
		}
		return result;
	}
	

}
