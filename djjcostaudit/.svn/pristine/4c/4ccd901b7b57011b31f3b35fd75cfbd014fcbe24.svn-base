package com.cost168.costaudit.controller.work;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cost168.costaudit.pojo.sys.SysUser;
import com.cost168.costaudit.pojo.work.WorkPerson;
import com.cost168.costaudit.service.work.WorkPersonService;
import com.cost168.costaudit.shiro.shiroUtil;
import com.cost168.costaudit.utils.EUDataGridResult;
import com.cost168.costaudit.utils.GlobalResult;
import com.cost168.costaudit.utils.JsonUtils;

@Controller
@RequestMapping("/workPerson")
public class WorkPersonController {
	
	@Autowired
	private WorkPersonService workPersonService;
	
	@ResponseBody
	@RequestMapping("/list")
	public EUDataGridResult list(HttpServletRequest request,WorkPerson workPerson, int page, int rows) {
		EUDataGridResult result=new EUDataGridResult();
		Map<String,Object> map=new HashMap<String,Object>();
		Map<String,Object> selectMap=JsonUtils.object2Map(workPerson);
		map.putAll(selectMap);
		try {
		    List<WorkPerson> list= workPersonService.selectListByMap(map);
		    int total= workPersonService.selectCountByMap(map);
			result.setRows(list);
			result.setTotal(total);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	
	@RequestMapping("/toEdit")
	public String toEdit(HttpServletRequest request){
		String url="";
		String id=request.getParameter("id");
		if(null!=id && !"".equals(id)) {
			url="/workPerson/upd";
			WorkPerson workPerson = workPersonService.selectByPrimaryKey(id);
			request.setAttribute("obj", workPerson);
		}else{
			SysUser currentUser=shiroUtil.getInstance().currentUser();
			url="/workPerson/save";
			WorkPerson workPerson=new WorkPerson();
			workPerson.setCreater(currentUser.getName());
			request.setAttribute("obj", workPerson);
		}
		request.setAttribute("url", url);
		return "workEnterprise/addPerson";
	}
	
	@ResponseBody
	@RequestMapping("/save")
	public GlobalResult save(HttpServletRequest request,WorkPerson workPerson){
		GlobalResult result=new GlobalResult();
		try {
			String id = UUID.randomUUID().toString().replace("-", "");
			workPerson.setId(id);
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
			if(null!=workPerson.getPlanStartTimeStr() && !"".equals(workPerson.getPlanStartTimeStr())){
				workPerson.setPlanStartTime(sdf.parse(workPerson.getPlanStartTimeStr()));
			}
			if(null!=workPerson.getPlanEndTimeStr() && !"".equals(workPerson.getPlanEndTimeStr())){
				workPerson.setPlanEndTime(sdf.parse(workPerson.getPlanEndTimeStr()));
			}
			if(null!=workPerson.getActualStartTimeStr() && !"".equals(workPerson.getActualStartTimeStr())){
				workPerson.setActualStartTime(sdf.parse(workPerson.getActualStartTimeStr()));
			}
			if(null!=workPerson.getActualEndTimeStr() && !"".equals(workPerson.getActualEndTimeStr())){
				workPerson.setActualEndTime(sdf.parse(workPerson.getActualEndTimeStr()));
			}
			SysUser user= shiroUtil.getInstance().currentUser();
			workPerson.setCreateTime(new Date());
			workPerson.setCreater(user.getName());
			workPersonService.insertSelective(workPerson);
			result.setStatus(200);
		} catch (Exception e) {
			e.printStackTrace();
			result.setStatus(500);
		}
		return result;
	}
	
	@ResponseBody
	@RequestMapping("/upd")
	public GlobalResult upd(HttpServletRequest request,WorkPerson workPerson){
		GlobalResult result=new GlobalResult();
		try {
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
			if(null!=workPerson.getPlanStartTimeStr() && !"".equals(workPerson.getPlanStartTimeStr())){
				workPerson.setPlanStartTime(sdf.parse(workPerson.getPlanStartTimeStr()));
			}
			if(null!=workPerson.getPlanEndTimeStr() && !"".equals(workPerson.getPlanEndTimeStr())){
				workPerson.setPlanEndTime(sdf.parse(workPerson.getPlanEndTimeStr()));
			}
			if(null!=workPerson.getActualStartTimeStr() && !"".equals(workPerson.getActualStartTimeStr())){
				workPerson.setActualStartTime(sdf.parse(workPerson.getActualStartTimeStr()));
			}
			if(null!=workPerson.getActualEndTimeStr() && !"".equals(workPerson.getActualEndTimeStr())){
				workPerson.setActualEndTime(sdf.parse(workPerson.getActualEndTimeStr()));
			}
			workPerson.setCreateTime(new Date());
			workPersonService.updateByPrimaryKeySelective(workPerson);
			result.setStatus(200);
		} catch (Exception e) {
			e.printStackTrace();
			result.setStatus(500);
		}
		return result;
	}
	
	@ResponseBody
	@RequestMapping("/del")
	public GlobalResult del(HttpServletRequest request) {
		GlobalResult result=new GlobalResult();
		String ids=request.getParameter("ids");
		String arr[]=ids.split(",");
		try {
			for(String i:arr){
				if(i!=null && !"".equals(i)){
					workPersonService.deleteByPrimaryKey(i);
				}
			}
			result.setStatus(200);
		} catch (Exception e) {
			e.printStackTrace();
			result.setStatus(500);
		}
		return result;
	}
	

}
