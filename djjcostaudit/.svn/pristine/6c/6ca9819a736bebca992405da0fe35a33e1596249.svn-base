package com.cost168.costaudit.controller.work;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cost168.costaudit.pojo.sys.SysUser;
import com.cost168.costaudit.pojo.work.WorkEnterprise;
import com.cost168.costaudit.pojo.work.WorkPerson;
import com.cost168.costaudit.pojo.work.WorkRegister;
import com.cost168.costaudit.pojo.work.vo.WorkRegisterVo;
import com.cost168.costaudit.service.work.WorkEnterpriseService;
import com.cost168.costaudit.service.work.WorkPersonService;
import com.cost168.costaudit.service.work.WorkRegisterService;
import com.cost168.costaudit.shiro.shiroUtil;
import com.cost168.costaudit.utils.EUDataGridResult;
import com.cost168.costaudit.utils.ExcelUtil;
import com.cost168.costaudit.utils.Global;
import com.cost168.costaudit.utils.GlobalResult;
import com.cost168.costaudit.utils.JsonUtils;
import com.cost168.costaudit.utils.OrderUtil;

/**
 * ClassName: WorkRegisterController
 *
 * @author lixiang
 * @Description: TODO
 */
@Controller
@RequestMapping("/workRegister")
public class WorkRegisterController {


    @Autowired
    private WorkRegisterService workRegisterService;
    @Autowired
    private WorkPersonService workPersonService;
    @Autowired
    private WorkEnterpriseService workEnterpriseService;


    @RequestMapping("/tolist")
    public String toRegister(HttpServletRequest request) {
        try {
            Map<String, Object> map = new HashMap<String, Object>();
            String year = workRegisterService.selectYearList();
            String month = workRegisterService.selectMonthList();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String currentDate = sdf.format(new Date());
            String regYear = currentDate.substring(0, 4);
            String regMonth = currentDate.substring(5, 7).replace("0", "");
            //String regMonth="6";
            map.put("regYear", regYear);
            map.put("regMonth", regMonth);
            List<WorkRegister> wrList = workRegisterService.selectByDay(map);
            int days = OrderUtil.getYearMonthDays(Integer.parseInt(regYear), Integer.parseInt(regMonth));
            List<String> daysList = OrderUtil.getYearMonthWeekDays(Integer.parseInt(regYear), Integer.parseInt(regMonth));
            if (null == wrList || wrList.size() <= 0) {
                //每个人的账号下插入一条一号的考勤记录
                List<WorkPerson> wpList = workPersonService.selectListByMap(null);
                if (null != wpList && wpList.size() > 0) {
                    WorkRegister register = null;
                    for (WorkPerson wp : wpList) {
                        for (int i = 1; i <= days; i++) {
                            register = new WorkRegister();
                            String id = UUID.randomUUID().toString().replace("-", "");
                            register.setId(id);
                            register.setPersonId(wp.getAccount());
                            register.setEnterpriseId(wp.getEnterpriseId());
                            register.setRegYearMonth(regYear + regMonth);
                            register.setRegYear(regYear);
                            register.setRegMonth(regMonth);
                            register.setRegDay(i + "");
                            if (daysList.contains(i + "")) {
                                register.setMorning("休息");
                                register.setAfternoon("休息");
                            }
                            register.setCreateTime(new Date());
                            String registerTimeStr = regYear + "-" + currentDate.substring(5, 7) + "-" + i + "";
                            register.setRegisterTime(sdf.parse(registerTimeStr));
                            workRegisterService.insertSelective(register);
                        }
                    }
                }
            }
            request.setAttribute("year", year);
            request.setAttribute("month", month);
            request.setAttribute("currentYear", regYear);
            request.setAttribute("currentMonth", regMonth);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "/register/list";
    }

    @ResponseBody
    @RequestMapping("/list")
    public EUDataGridResult list(HttpServletRequest request, WorkRegisterVo workRegisterVo, int page, int rows) {
        EUDataGridResult result = new EUDataGridResult();
        Map<String, Object> selectMap = JsonUtils.object2Map(workRegisterVo);
        Map<String, Object> map = new HashMap<String, Object>();
        map.putAll(selectMap);
        try {
            String startTime = request.getParameter("startTime");
            String endTime = request.getParameter("endTime");
            if (null != startTime && !"".equals(startTime)) {
                map.put("startTime", startTime + " 00:00:00");
            }
            if (null != endTime && !"".equals(endTime)) {
                map.put("endTime", endTime + " 24:00:00");
            }
            map.put("isPage", true);
		    map.put("curPage", rows*(page-1));
		    map.put("pageSize", rows);
            List<WorkRegisterVo> list = workRegisterService.selectListByMap(map);
            Global.REG_EXPORT_LIST = list;
            int total = workRegisterService.selectCountByMap(map);
            result.setRows(list);
            result.setTotal(total);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }

    @RequestMapping("/toRegisterDialog")
    public String toRegisterDialog(HttpServletRequest request) {
        String personId = request.getParameter("personId");
        WorkPerson workPerson = workPersonService.selectByPrimaryKey(personId);
        if (null != workPerson) {
            WorkEnterprise workEnterprise = workEnterpriseService.selectByPrimaryKey(workPerson.getEnterpriseId());
            if (null != workEnterprise) {
                workPerson.setEnterpriseId(workEnterprise.getId());
                workPerson.setEnterpriseName(workEnterprise.getName());
            }
            request.setAttribute("obj", workPerson);
        }
        return "register/registerDialog";
    }

    @RequestMapping("/toRegisterBatchDialog")
    public String toRegisterBatchDialog(HttpServletRequest request) {
        String personIds = request.getParameter("personIds");
        String arrIds[] = personIds.split(",");
        List<WorkPerson> wpList = new ArrayList<WorkPerson>();
        WorkPerson wp = null;
        for (String id : arrIds) {
            wp = workPersonService.selectByPrimaryKey(id);
            wpList.add(wp);
        }
        request.setAttribute("objList", wpList);
        return "register/registerBatchDialog";
    }

    @ResponseBody
    @RequestMapping("/save")
    public GlobalResult save(HttpServletRequest request, WorkRegister workRegister) {
        GlobalResult result = new GlobalResult();
        SysUser currentUser = shiroUtil.getInstance().currentUser();
        try {
        	SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
            String registerTimeStrStart = request.getParameter("registerTimeStrStart");
            String registerTimeStrEnd = request.getParameter("registerTimeStrEnd");
			String startDay=registerTimeStrStart.substring(8,10).replace("0", "");
			String endDay=registerTimeStrEnd.substring(8,10).replace("0", "");
			int s=Integer.parseInt(startDay);
			int e=Integer.parseInt(endDay);
			String regYear = registerTimeStrStart.substring(0, 4);
			String regMonth = registerTimeStrStart.substring(5, 7).replace("0", "");
			String yearMonth = regYear + regMonth;
            String morning = workRegister.getMorning();
            String afternoon = workRegister.getAfternoon();
            float workingDay = 0;
            if ("上班".equals(morning) && "上班".equals(afternoon)) {
                workingDay = 1;
            } else if ("上班".equals(morning) && !"上班".equals(afternoon)) {
                workingDay = 0.5f;
            } else if (!"上班".equals(morning) && "上班".equals(afternoon)) {
                workingDay = 0.5f;
            } else {
                workingDay = 0;
            }
			//long days=OrderUtil.getDaySub(registerTimeStrStart,registerTimeStrEnd);
            Map<String,Object> map=new HashMap<String, Object>();
			WorkPerson wp= workPersonService.selectByAccount(workRegister.getPersonId());
			for(int i=s;i<=e;i++){
				map.clear();
				map.put("personId", workRegister.getPersonId());
				map.put("regYear", regYear);
				map.put("regMonth",regMonth);
				map.put("regDay", i);
				List<WorkRegister> registerList = workRegisterService.selectByDay(map);
				WorkRegister register=null;
				if(null!=registerList&& registerList.size()>0){
					 register=registerList.get(0);
					 if(null==register.getLeaveprocess()||"".equals(register.getLeaveprocess())){
						 if("年休假".equals(workRegister.getMorning())){
							 if(!"年休假".equals(register.getMorning())){
								 wp.setAnnualLeaveUseup((Float.parseFloat(wp.getAnnualLeaveUseup())+0.5)+"");
							 }
						 }else{
							 if("年休假".equals(register.getMorning())){
								 wp.setAnnualLeaveUseup((Float.parseFloat(wp.getAnnualLeaveUseup())-0.5)+"");
							 }
						 }
						 if("年休假".equals(workRegister.getAfternoon())){
							 if(!"年休假".equals(register.getAfternoon())){
								 wp.setAnnualLeaveUseup((Float.parseFloat(wp.getAnnualLeaveUseup())+0.5)+"");
							 }
						 }else{
							 if("年休假".equals(register.getAfternoon())){
								 wp.setAnnualLeaveUseup((Float.parseFloat(wp.getAnnualLeaveUseup())-0.5)+"");
							 }
						 }
						 register.setMorning(workRegister.getMorning());
						 register.setAfternoon(workRegister.getAfternoon());
						 register.setCreater(currentUser.getName());
						 register.setRemark(workRegister.getRemark());
						 workRegisterService.updateByPrimaryKeySelective(register);
						 workPersonService.updateByPrimaryKeySelective(wp);
					 }
				}else{
	                register = new WorkRegister();
	                String id = UUID.randomUUID().toString().replace("-", "");
	                register.setId(id);
	                register.setPersonId(workRegister.getPersonId());
	                register.setEnterpriseId(workRegister.getEnterpriseId());
	                register.setRegYearMonth(yearMonth);
	                register.setRegYear(regYear);
	                register.setRegMonth(regMonth);
	                register.setRegDay(i+"");
	                register.setMorning(workRegister.getMorning());
	                register.setAfternoon(workRegister.getAfternoon());
	                register.setWorkingDay(workingDay);
	                register.setCreateTime(new Date());
	                register.setCreater(currentUser.getName());
	                register.setRemark(workRegister.getRemark());
	                String str=regYear+"-"+regMonth+"-"+i+"";
	                register.setRegisterTime(sdf.parse(str));
	                workRegisterService.insertSelective(register);
	                if("年休假".equals(workRegister.getMorning())){
						wp.setAnnualLeaveUseup((Float.parseFloat(wp.getAnnualLeaveUseup())+0.5)+"");
					}
					if("年休假".equals(workRegister.getAfternoon())){
						wp.setAnnualLeaveUseup((Float.parseFloat(wp.getAnnualLeaveUseup())+0.5)+"");
					}
					workPersonService.updateByPrimaryKeySelective(wp);
	            }
				
			}
            result.setStatus(200);
        } catch (Exception e) {
            e.printStackTrace();
            result.setStatus(500);
        }
        return result;
    }

    @ResponseBody
    @RequestMapping("/batchSave")
    public GlobalResult batchSave(HttpServletRequest request, WorkRegister workRegister) {
        GlobalResult result = new GlobalResult();
        SysUser currentUser = shiroUtil.getInstance().currentUser();
        String personIds = workRegister.getPersonId();
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
        try {
        	String registerTimeStrStart = request.getParameter("registerTimeStrStart");
            String registerTimeStrEnd = request.getParameter("registerTimeStrEnd");
 			String startDay=registerTimeStrStart.substring(8,10).replace("0", "");
 			String endDay=registerTimeStrEnd.substring(8,10).replace("0", "");
 			int s=Integer.parseInt(startDay);
 			int e=Integer.parseInt(endDay);
 			String regYear = registerTimeStrStart.substring(0, 4);
 			String regMonth = registerTimeStrStart.substring(5, 7).replace("0", "");
 			String yearMonth = regYear + regMonth;
            String morning = workRegister.getMorning();
            String afternoon = workRegister.getAfternoon();
             float workingDay = 0;
             if ("上班".equals(morning) && "上班".equals(afternoon)) {
                 workingDay = 1;
             } else if ("上班".equals(morning) && !"上班".equals(afternoon)) {
                 workingDay = 0.5f;
             } else if (!"上班".equals(morning) && "上班".equals(afternoon)) {
                 workingDay = 0.5f;
             } else {
                 workingDay = 0;
             }
            String arrIds[] = personIds.split(",");
            List<WorkPerson> wpList = new ArrayList<WorkPerson>();
            WorkPerson wp = null;
            for (String id : arrIds) {
                wp = workPersonService.selectByPrimaryKey(id);
                wpList.add(wp);
            }
            for (WorkPerson p : wpList) {
            	Map<String,Object> map=new HashMap<String, Object>();
    			WorkPerson wps= workPersonService.selectByAccount(p.getAccount());
    			for(int i=s;i<=e;i++){
    				map.clear();
    				map.put("personId",p.getAccount());
    				map.put("regYear", regYear);
    				map.put("regMonth",regMonth);
    				map.put("regDay", i);
    				List<WorkRegister> registerList = workRegisterService.selectByDay(map);
    				WorkRegister register=null;
    				if(null!=registerList&& registerList.size()>0){
    					 register=registerList.get(0);
    					 if(null==register.getLeaveprocess()||"".equals(register.getLeaveprocess())){
    						 if("年休假".equals(workRegister.getMorning())){
    							 if(!"年休假".equals(register.getMorning())){
    								 wps.setAnnualLeaveUseup((Float.parseFloat(wps.getAnnualLeaveUseup())+0.5)+"");
    							 }
    						 }else{
    							 if("年休假".equals(register.getMorning())){
    								 wps.setAnnualLeaveUseup((Float.parseFloat(wps.getAnnualLeaveUseup())-0.5)+"");
    							 }
    						 }
    						 if("年休假".equals(workRegister.getAfternoon())){
    							 if(!"年休假".equals(register.getAfternoon())){
    								 wps.setAnnualLeaveUseup((Float.parseFloat(wps.getAnnualLeaveUseup())+0.5)+"");
    							 }
    						 }else{
    							 if("年休假".equals(register.getAfternoon())){
    								 wps.setAnnualLeaveUseup((Float.parseFloat(wps.getAnnualLeaveUseup())-0.5)+"");
    							 }
    						 }
    						 register.setMorning(workRegister.getMorning());
    						 register.setAfternoon(workRegister.getAfternoon());
    						 register.setCreater(currentUser.getName());
    						 register.setRemark(workRegister.getRemark());
    						 workRegisterService.updateByPrimaryKeySelective(register);
    						 workPersonService.updateByPrimaryKeySelective(wp);
    					 }
    				}else{
    	                register = new WorkRegister();
    	                String id = UUID.randomUUID().toString().replace("-", "");
    	                register.setId(id);
    	                register.setPersonId(p.getAccount());
    	                register.setEnterpriseId(p.getEnterpriseId());
    	                register.setRegYearMonth(yearMonth);
    	                register.setRegYear(regYear);
    	                register.setRegMonth(regMonth);
    	                register.setRegDay(i+"");
    	                register.setMorning(workRegister.getMorning());
    	                register.setAfternoon(workRegister.getAfternoon());
    	                register.setWorkingDay(workingDay);
    	                register.setCreateTime(new Date());
    	                register.setCreater(currentUser.getName());
    	                register.setRemark(workRegister.getRemark());
    	                String str=regYear+"-"+regMonth+"-"+i+"";
    	                register.setRegisterTime(sdf.parse(str));
    	                workRegisterService.insertSelective(register);
    	                if("年休假".equals(workRegister.getMorning())){
    	                	wps.setAnnualLeaveUseup((Float.parseFloat(wps.getAnnualLeaveUseup())+0.5)+"");
    					}
    					if("年休假".equals(workRegister.getAfternoon())){
    						wps.setAnnualLeaveUseup((Float.parseFloat(wps.getAnnualLeaveUseup())+0.5)+"");
    					}
    					workPersonService.updateByPrimaryKeySelective(wps);
    	            }
    			}
            }
            result.setStatus(200);
        } catch (Exception e) {
            e.printStackTrace();
            result.setStatus(500);
        }
        return result;
    }

    @RequestMapping("/toPersonEdit")
    public String toPersonEdit(HttpServletRequest request) {
        String id = request.getParameter("id");
        WorkPerson workPerson = workPersonService.selectByPrimaryKey(id);
        WorkEnterprise workEnterprise = workEnterpriseService.selectByPrimaryKey(workPerson.getEnterpriseId());
        workPerson.setEnterpriseName(workEnterprise.getName());
        request.setAttribute("obj", workPerson);
        return "/register/personEdit";
    }

    /**
     * @param @param request
     * @param @param response
     * @return void
     * @throws
     * @Description: TODO
     * @author lixiang
     * @date 2019-6-10上午11:13:58
     * @Company 广东华联软件科技有限公司
     */
    @ResponseBody
    @RequestMapping("/exportRegister")
    public void exportRegister(HttpServletRequest request, HttpServletResponse response) {
        try {
            String currentYearMonth = request.getParameter("currentYearMonth");
            List<WorkRegisterVo> list = Global.REG_EXPORT_LIST;
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
            String dateString = formatter.format(new Date());
            String path = request.getSession().getServletContext().getRealPath("/template/report/考勤管理.xlsx");
            String newPath = request.getSession().getServletContext().getRealPath("/template/temp/" + currentYearMonth + "月度考勤管理导出_导出日期_" + dateString + ".xlsx");
            Map<String, List<List<String>>> date = new HashMap<String, List<List<String>>>();
            List<List<String>> rowList = new ArrayList<List<String>>();
            List<String> cellList = new ArrayList<String>();
            for (WorkRegisterVo l : list) {
                cellList = new ArrayList<String>();
                cellList.add(l.getName());
                cellList.add(l.getEnterpriseName());
                cellList.add(l.getMorning_1());
                cellList.add(l.getAfternoon_1());
                cellList.add(l.getMorning_2());
                cellList.add(l.getAfternoon_2());
                cellList.add(l.getMorning_3());
                cellList.add(l.getAfternoon_3());
                cellList.add(l.getMorning_4());
                cellList.add(l.getAfternoon_4());
                cellList.add(l.getMorning_5());
                cellList.add(l.getAfternoon_5());
                cellList.add(l.getMorning_6());
                cellList.add(l.getAfternoon_6());
                cellList.add(l.getMorning_7());
                cellList.add(l.getAfternoon_7());
                cellList.add(l.getMorning_8());
                cellList.add(l.getAfternoon_8());
                cellList.add(l.getMorning_9());
                cellList.add(l.getAfternoon_9());
                cellList.add(l.getMorning_10());
                cellList.add(l.getAfternoon_10());
                cellList.add(l.getMorning_11());
                cellList.add(l.getAfternoon_11());
                cellList.add(l.getMorning_12());
                cellList.add(l.getAfternoon_12());
                cellList.add(l.getMorning_13());
                cellList.add(l.getAfternoon_13());
                cellList.add(l.getMorning_14());
                cellList.add(l.getAfternoon_14());
                cellList.add(l.getMorning_15());
                cellList.add(l.getAfternoon_15());
                cellList.add(l.getMorning_16());
                cellList.add(l.getAfternoon_16());
                cellList.add(l.getMorning_17());
                cellList.add(l.getAfternoon_17());
                cellList.add(l.getMorning_18());
                cellList.add(l.getAfternoon_18());
                cellList.add(l.getMorning_19());
                cellList.add(l.getAfternoon_19());
                cellList.add(l.getMorning_20());
                cellList.add(l.getAfternoon_20());
                cellList.add(l.getMorning_21());
                cellList.add(l.getAfternoon_21());
                cellList.add(l.getMorning_22());
                cellList.add(l.getAfternoon_22());
                cellList.add(l.getMorning_23());
                cellList.add(l.getAfternoon_23());
                cellList.add(l.getMorning_24());
                cellList.add(l.getAfternoon_24());
                cellList.add(l.getMorning_25());
                cellList.add(l.getAfternoon_25());
                cellList.add(l.getMorning_26());
                cellList.add(l.getAfternoon_26());
                cellList.add(l.getMorning_27());
                cellList.add(l.getAfternoon_27());
                cellList.add(l.getMorning_28());
                cellList.add(l.getAfternoon_28());
                cellList.add(l.getMorning_29());
                cellList.add(l.getAfternoon_29());
                cellList.add(l.getMorning_30());
                cellList.add(l.getAfternoon_30());
                cellList.add(l.getMorning_31());
                cellList.add(l.getAfternoon_31());
                cellList.add(l.getKxnj());
                cellList.add(l.getYxnj());
                cellList.add(l.getSb());
                cellList.add(l.getJb());
                cellList.add(l.getNxj());
                cellList.add(l.getTqj());
                cellList.add(l.getSj());
                cellList.add(l.getSyj());
                cellList.add(l.getJsj());
                cellList.add(l.getBj());
                cellList.add(l.getHj());
                cellList.add(l.getSangj());
                cellList.add(l.getLgxx());
                cellList.add(l.getCc());
                cellList.add(l.getKg());
                cellList.add(l.getQt());
                cellList.add(l.getJb());
                cellList.add(l.getXx());
                cellList.add(l.getReg_creater());
                cellList.add(null==l.getQt()?"":l.getQt()+" & "+null==l.getReg_remark()?"":l.getReg_remark());
                rowList.add(cellList);
            }
            date.put("考勤管理（月度）", rowList);
            ExcelUtil.copyExcel(2, date, path, newPath, request, response);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * created by ZYL on 2019/6/13
     * 考勤导入，先把用户上传的文件保存到服务器本地硬盘，再读取文件，写数据进数据库。
     */
    @RequestMapping("/attendanceImport")
    public void attendanceImport(HttpServletRequest request) {
        workRegisterService.attendanceImport(request);
    }
}
