package com.cost168.costaudit.service.work.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import com.cost168.costaudit.pojo.work.*;
import org.apache.poi.util.SystemOutLogger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cost168.costaudit.mapper.work.WorkProcessApplyMapper;
import com.cost168.costaudit.pojo.sys.SysUser;
import com.cost168.costaudit.service.sys.SysUserService;
import com.cost168.costaudit.service.work.WorkCalendarService;
import com.cost168.costaudit.service.work.WorkPersonService;
import com.cost168.costaudit.service.work.WorkProcessApplyService;
import com.cost168.costaudit.service.work.WorkProcessHistoryService;
import com.cost168.costaudit.service.work.WorkRegisterService;
import com.cost168.costaudit.shiro.shiroUtil;
import com.cost168.costaudit.utils.GlobalResult;

import org.springframework.transaction.annotation.Transactional;

@Service
@Transactional(rollbackFor = Exception.class)
public class WorkProcessApplyServiceImpl implements WorkProcessApplyService {

	@Autowired
	private WorkProcessApplyMapper workProcessApplyMapper;
	@Autowired
	private WorkPersonService workPersonService;
	@Autowired
	private WorkCalendarService workCalendarService;
	@Autowired
	private WorkProcessHistoryService workProcessHistoryService;
	@Autowired
	private WorkRegisterService workRegisterService;
	@Autowired
	private SysUserService sysUserService;

	@Override
	public List<WorkProcessApply> selectByExample(
			WorkProcessApplyExample example) {
		return workProcessApplyMapper.selectByExample(example);
	}

	@Override
	public WorkProcessApply selectByPrimaryKey(String id) {
		return workProcessApplyMapper.selectByPrimaryKey(id);
	}

	@Override
	public int insertSelective(WorkProcessApply record) {
		return workProcessApplyMapper.insertSelective(record);
	}

	@Override
	public int updateByPrimaryKeySelective(WorkProcessApply workProcessApply) {
		return workProcessApplyMapper.updateByPrimaryKeySelective(workProcessApply);
	}

	@Override
	public int deleteByPrimaryKey(String id) {
		return workProcessApplyMapper.deleteByPrimaryKey(id);
	}

	@Override
	public List<WorkProcessApply> selectListByMap(Map<String, Object> map) {
		return workProcessApplyMapper.selectListByMap(map);
	}

	@Override
	public int selectCountByMap(Map<String, Object> map) {
		return workProcessApplyMapper.selectCountByMap(map);
//		return 0;
	}

	@Override
	public void save(HttpServletRequest request,
					 WorkProcessApply workProcessApply, GlobalResult result)
			throws Exception {
			String remarkQt = request.getParameter("remarkQt");
			if (null != remarkQt && !"".equals(remarkQt) && !"其他".equals(remarkQt)) {
				workProcessApply.setRemark(remarkQt);
			}
			SysUser currentUser = shiroUtil.getInstance().currentUser();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			String leaveTime = request.getParameter("leaveTime");
			String start = leaveTime.substring(0, 10);
			String end = leaveTime.substring(leaveTime.length() - 10,
					leaveTime.length());
			String regYear = start.substring(0, 4);
			WorkPerson wp = workPersonService.selectByAccount(workProcessApply
					.getProposer());
			Float total = Float.parseFloat(wp.getAnnualLeaveTotal());
			Float usedup = Float.parseFloat(wp.getAnnualLeaveUseup());
			workProcessApply.setLeaveStartTime(sdf.parse(start));
			workProcessApply.setLeaveEndTime(sdf.parse(end));
		if (TimeConflict(workProcessApply)) {
			workProcessApply.setStatus("审批中");
			workProcessApply.setCreateTime(new Date());
			String type = workProcessApply.getType();
			// 请假天数
			String startDay = start.substring(8, 10);
			String endDay = end.substring(8, 10);
			int s = Integer.parseInt(startDay);
			int e = Integer.parseInt(endDay);
			List<String> excepdays = new ArrayList<String>();
			WorkCalendar wc = workCalendarService.selectByPrimaryKey(regYear);
			if (null != wc && null != wc.getExcepdays()) {
				excepdays = Arrays.asList(wc.getExcepdays().replaceAll(" ", "")
						.split(","));
			}
			float a = 0;
			if (e >= s) {
				for (int i = s; i <= e; i++) {
					String temDate = "";
					if (i < 10) {
						temDate = regYear + "-" + start.substring(5, 7) + "-0" + i + "";
					} else {
						temDate = regYear + "-" + start.substring(5, 7) + "-" + i + "";
					}
					if (!excepdays.contains(temDate)) {
						a++;
					}
				}
				// 判断是半天还是全天
				String morAftAll = workProcessApply.getMorAftAll();
				if ("全天".equals(morAftAll)) {
					workProcessApply.setLeaveDays(a);
				} else {
					workProcessApply.setLeaveDays(a / 2);
					a = a / 2;
				}
				// 判断是否有可休年假
				Float ky = total - usedup;
				if ("年休假".equals(type)) {
					// long days=OrderUtil.getDaySub(start,end);
					if (a > ky) {
						result.setStatus(300);
					} else {
						workProcessApply.setKxnj(ky);
						insertSelective(workProcessApply);
						saveHistory(workProcessApply, currentUser);
						result.setStatus(200);
					}
				} else {
					workProcessApply.setKxnj(ky);
					insertSelective(workProcessApply);
					// 插入历史表
					saveHistory(workProcessApply, currentUser);
					result.setStatus(200);
				}
			} else {
				result.setStatus(500);
			}
		}else {
			result.setStatus(400);
		}
	}

	private void saveHistory(WorkProcessApply workProcessApply,
							 SysUser currentUser) {
		Calendar calendar = Calendar.getInstance();
		WorkProcessHistory wph = new WorkProcessHistory();
		String id = UUID.randomUUID().toString().replace("-", "");
		wph.setId(id);
		wph.setOperatorId(currentUser.getAccount());
		wph.setOperatorName(currentUser.getName());
        if (null == workProcessApply.getOpinion()
                || "".equals(workProcessApply.getOpinion())) {
            if(null == workProcessApply.getContent()
                    || "".equals(workProcessApply.getContent())){
                wph.setOpinion("同意");
            }else {
                wph.setOpinion(workProcessApply.getContent());
            }
        } else {
            wph.setOpinion(workProcessApply.getOpinion());
        }
		wph.setProcessId(workProcessApply.getId());
		wph.setRelatedId(workProcessApply.getRelatedId());
		wph.setRelatedName(workProcessApply.getRelatedName());
		wph.setOperatorNode("发起");
		wph.setCreateTime(new Date());
		calendar.add(Calendar.SECOND, 1);
		wph.setOperatorTime(new Date());
		wph.setOrderTime(calendar.getTime());
		workProcessHistoryService.insertSelective(wph);
		WorkProcessHistory wph2 = new WorkProcessHistory();
		String id2 = UUID.randomUUID().toString().replace("-", "");
		wph2.setId(id2);
		wph2.setOperatorId(workProcessApply.getNextperson());
		wph2.setOperatorName(workProcessApply.getNextpersonName());
		wph2.setProcessId(workProcessApply.getId());
		wph2.setRelatedId(workProcessApply.getRelatedId());
		wph2.setRelatedName(workProcessApply.getRelatedName());
		wph2.setOperatorNode("审批中");
		wph2.setCreateTime(new Date());
		calendar.add(Calendar.SECOND, 2);
		wph2.setOrderTime(calendar.getTime());
		workProcessHistoryService.insertSelective(wph2);
	}
	//插入考勤表
	@Override
	public void handleTask(HttpServletRequest request,
						   WorkProcessApply workProcessApply, GlobalResult result)
			throws Exception {
		//更新请假申请
		WorkProcessApply wp = selectByPrimaryKey(workProcessApply.getId());
		wp.setStatus("审批通过");
		wp.setRemark(workProcessApply.getRemark());
		updateByPrimaryKeySelective(wp);
		// 更新当前状态记录
		Map<String, Object> map1 = new HashMap<String, Object>();
		map1.put("processId", workProcessApply.getId());
		WorkProcessHistory wph = workProcessHistoryService.getCurrentNode(map1);
		wph.setOperatorNode("结束");
		if (null == workProcessApply.getOpinion()
				|| "".equals(workProcessApply.getOpinion())) {
			wph.setOpinion("同意");
		} else {
			wph.setOpinion(workProcessApply.getOpinion());
		}
		wph.setOperatorTime(new Date());
		workProcessHistoryService.updateByPrimaryKeySelective(wph);
		// 修改考勤表
		addAttendance(request, workProcessApply, result);
	}

	// 修改考勤表信息
	public void addAttendance(HttpServletRequest request,
							  WorkProcessApply workProcessApply, GlobalResult result)
			throws Exception {
		WorkProcessApply wp = selectByPrimaryKey(workProcessApply.getId());
		String regYear = wp.getLeaveStartTimeStr().substring(0, 4);
		String regMonth = wp.getLeaveStartTimeStr().substring(5, 7);
		int tem = Integer.parseInt(regMonth);
		String yearMonth = regYear + tem;
		String leaveStart = wp.getLeaveStartTimeStr();
		String leaveEnd = wp.getLeaveEndTimeStr();
		// long days=OrderUtil.getDaySub(leaveStart,leaveEnd);
		String startDay = leaveStart.substring(8, 10);
		String endDay = leaveEnd.substring(8, 10);
		int s = Integer.parseInt(startDay);
		int e = Integer.parseInt(endDay);
		Map<String, Object> map = new HashMap<String, Object>();
		List<String> excepdays = new ArrayList<String>();
		WorkCalendar wc = workCalendarService.selectByPrimaryKey(regYear);
		WorkPerson wps = workPersonService.selectByAccount(wp.getProposer());
		if (null != wc && null != wc.getExcepdays()) {
			excepdays = Arrays.asList(wc.getExcepdays().replaceAll(" ", "")
					.split(","));
		}
		for (int i = s; i <= e; i++) {
			map.clear();
			map.put("personId", wp.getProposer());
			map.put("regYear", regYear);
			map.put("regMonth", regMonth);
			map.put("regDay", i);
			List<WorkRegister> registerList = workRegisterService
					.selectByDay(map);
			WorkRegister register = null;
			String temDate = "";
			if (i < 10) {
				temDate = regYear + "-" + leaveStart.substring(5, 7) + "-0" + i
						+ "";
			} else {
				temDate = regYear + "-" + leaveStart.substring(5, 7) + "-" + i
						+ "";
			}
			if (null != registerList && registerList.size() > 0) {
				register = registerList.get(0);
				if (excepdays.contains(temDate)) {

				} else {
					String morAftAll = wp.getMorAftAll();
					if ("全天".equals(morAftAll)) {
						if ("年休假".equals(wp.getType())) {
							if (!"年休假".equals(register.getMorning())) {
								wps.setAnnualLeaveUseup((Float.parseFloat(wps
										.getAnnualLeaveUseup()) + 0.5) + "");
							}
						} else {
							if ("年休假".equals(register.getMorning())) {
								wps.setAnnualLeaveUseup((Float.parseFloat(wps
										.getAnnualLeaveUseup()) - 0.5) + "");
							}
						}
						if ("年休假".equals(wp.getType())) {
							if (!"年休假".equals(register.getAfternoon())) {
								wps.setAnnualLeaveUseup((Float.parseFloat(wps
										.getAnnualLeaveUseup()) + 0.5) + "");
							}
						} else {
							if ("年休假".equals(register.getAfternoon())) {
								wps.setAnnualLeaveUseup((Float.parseFloat(wps
										.getAnnualLeaveUseup()) - 0.5) + "");
							}
						}
						register.setMorning(wp.getType());
						register.setAfternoon(wp.getType());
						register.setWorkingDay(1.0f);
					} else if ("上午".equals(morAftAll)) {

						if ("年休假".equals(wp.getType())) {
							if (!"年休假".equals(register.getMorning())) {
								wps.setAnnualLeaveUseup((Float.parseFloat(wps
										.getAnnualLeaveUseup()) + 0.5) + "");
							}
						} else {
							if ("年休假".equals(register.getMorning())) {
								wps.setAnnualLeaveUseup((Float.parseFloat(wps
										.getAnnualLeaveUseup()) - 0.5) + "");
							}
						}
						register.setMorning(wp.getType());
						register.setWorkingDay(0.5f);
					} else if ("下午".equals(morAftAll)) {
						if ("年休假".equals(wp.getType())) {
							if (!"年休假".equals(register.getAfternoon())) {
								wps.setAnnualLeaveUseup((Float.parseFloat(wps
										.getAnnualLeaveUseup()) + 0.5) + "");
							}
						} else {
							if ("年休假".equals(register.getAfternoon())) {
								wps.setAnnualLeaveUseup((Float.parseFloat(wps
										.getAnnualLeaveUseup()) - 0.5) + "");
							}
						}
						register.setAfternoon(wp.getType());
						register.setWorkingDay(0.5f);
					}

				}
				// register.setCreater(currentUser.getName());
				register.setRemark(wp.getRemark());
				register.setLeaveprocess(wp.getId());
				workRegisterService.updateByPrimaryKeySelective(register);
				workPersonService.updateByPrimaryKeySelective(wps);
			} else {
				register = new WorkRegister();
				String id1 = UUID.randomUUID().toString().replace("-", "");
				register.setId(id1);
				register.setPersonId(wp.getProposer());
				register.setEnterpriseId(wp.getEnterpriseId());
				register.setRegYearMonth(yearMonth);
				register.setRegYear(regYear);
				register.setRegMonth(regMonth);
				register.setRegDay(i + "");
				String morAftAll = wp.getMorAftAll();
				if ("全天".equals(morAftAll)) {
					register.setMorning(wp.getType());
					register.setAfternoon(wp.getType());
					register.setWorkingDay(1.0f);
				} else if ("上午".equals(morAftAll)) {
					register.setMorning(wp.getType());
					register.setWorkingDay(0.5f);
				} else if ("下午".equals(morAftAll)) {
					register.setAfternoon(wp.getType());
					register.setWorkingDay(0.5f);
				}
				register.setCreateTime(new Date());
				// register.setCreater(currentUser.getName());
				register.setRemark(wp.getRemark());
				register.setLeaveprocess(wp.getId());
				register.setRegisterTime(new Date());
				workRegisterService.insertSelective(register);
				if ("年休假".equals(register.getMorning())) {
					wps.setAnnualLeaveUseup((Float.parseFloat(wps
							.getAnnualLeaveUseup()) + 0.5) + "");
				}
				if ("年休假".equals(register.getAfternoon())) {
					wps.setAnnualLeaveUseup((Float.parseFloat(wps
							.getAnnualLeaveUseup()) + 0.5) + "");
				}
				workPersonService.updateByPrimaryKeySelective(wps);
			}
		}

	}
	// 恢复考勤信息
	public void updAttendance(HttpServletRequest request,
							  WorkProcessApply workProcessApply, GlobalResult result)
			throws Exception {

        WorkProcessApply wp = selectByPrimaryKey(workProcessApply.getId());
        String regYear = wp.getLeaveStartTimeStr().substring(0, 4);
        String regMonth = wp.getLeaveStartTimeStr().substring(5, 7);
		int tem = Integer.parseInt(regMonth);
        String yearMonth = regYear + tem;
        String leaveStart = wp.getLeaveStartTimeStr();
        String leaveEnd = wp.getLeaveEndTimeStr();
        // long days=OrderUtil.getDaySub(leaveStart,leaveEnd);
        String startDay = leaveStart.substring(8, 10);
        String endDay = leaveEnd.substring(8, 10);
        int s = Integer.parseInt(startDay);
        int e = Integer.parseInt(endDay);
        Map<String, Object> map = new HashMap<String, Object>();
        List<String> excepdays = new ArrayList<String>();
        WorkCalendar wc = workCalendarService.selectByPrimaryKey(regYear);
        WorkPerson wps = workPersonService.selectByAccount(wp.getProposer());
        if (null != wc && null != wc.getExcepdays()) {
            excepdays = Arrays.asList(wc.getExcepdays().replaceAll(" ", "")
                    .split(","));
        }
        for (int i = s; i <= e; i++) {
            map.clear();
            map.put("personId", wp.getProposer());
            map.put("regYear", regYear);
            map.put("regMonth", regMonth);
            map.put("regDay", i);
            List<WorkRegister> registerList = workRegisterService.selectByDay(map);
            WorkRegister register = null;
            String temDate = "";
            if (i < 10) {
                temDate = regYear + "-" + leaveStart.substring(5, 7) + "-0" + i
                        + "";
            } else {
                temDate = regYear + "-" + leaveStart.substring(5, 7) + "-" + i
                        + "";
            }
            if (null != registerList && registerList.size() > 0) {
                register = registerList.get(0);
                if (excepdays.contains(temDate)) {

                } else {
                    String morAftAll = wp.getMorAftAll();
                    if ("全天".equals(morAftAll)) {
                        if ("年休假".equals(wp.getType())) {
                            if("年休假".equals(register.getMorning())){
                                wps.setAnnualLeaveUseup((Float.parseFloat(wps
                                        .getAnnualLeaveUseup()) -0.5) + "");
                            }
                            if("年休假".equals(register.getAfternoon())) {
                                wps.setAnnualLeaveUseup((Float.parseFloat(wps
                                        .getAnnualLeaveUseup()) - 0.5) + "");
                            }
                        }
                        register.setMorning("上班");
                        register.setAfternoon("上班");
                        register.setWorkingDay(0f);
                    } else if ("上午".equals(morAftAll)) {
                        if ("年休假".equals(wp.getType())) {
                            if ("年休假".equals(register.getMorning())) {
                                wps.setAnnualLeaveUseup((Float.parseFloat(wps
                                        .getAnnualLeaveUseup()) -0.5) + "");
                            }
                        }
                        register.setMorning("上班");
                        register.setWorkingDay(0f);
                    } else if ("下午".equals(morAftAll)) {
                        if ("年休假".equals(wp.getType())) {
                            if ("年休假".equals(register.getAfternoon())) {
                                wps.setAnnualLeaveUseup((Float.parseFloat(wps
                                        .getAnnualLeaveUseup()) -0.5) + "");
                            }
                        }
                        register.setAfternoon("上班");
                        register.setWorkingDay(0f);
                    }

                }
                // register.setCreater(currentUser.getName());
                register.setRemark(wp.getRemark());
                register.setLeaveprocess(wp.getId());
                workRegisterService.updateByPrimaryKeySelective(register);
                workPersonService.updateByPrimaryKeySelective(wps);
            } else {
                register = new WorkRegister();
                String id1 = UUID.randomUUID().toString().replace("-", "");
                register.setId(id1);
                register.setPersonId(wp.getProposer());
                register.setEnterpriseId(wp.getEnterpriseId());
                register.setRegYearMonth(yearMonth);
                register.setRegYear(regYear);
                register.setRegMonth(regMonth);
                register.setRegDay(i + "");
                String morAftAll = wp.getMorAftAll();
                if ("全天".equals(morAftAll)) {
                    register.setMorning("上班");
                    register.setAfternoon("上班");
                    register.setWorkingDay(0f);
                } else if ("上午".equals(morAftAll)) {
                    register.setMorning("上班");
                    register.setWorkingDay(0f);
                } else if ("下午".equals(morAftAll)) {
                    register.setAfternoon("上班");
                    register.setWorkingDay(0f);
                }
                register.setCreateTime(new Date());
                // register.setCreater(currentUser.getName());
                register.setRemark(wp.getRemark());
                register.setLeaveprocess(wp.getId());
                register.setRegisterTime(new Date());
                workRegisterService.insertSelective(register);
                if ("年休假".equals(register.getMorning())) {
                    wps.setAnnualLeaveUseup((Float.parseFloat(wps
                            .getAnnualLeaveUseup()) -0.5) + "");
                }
                if ("年休假".equals(register.getAfternoon())) {
                    wps.setAnnualLeaveUseup((Float.parseFloat(wps
                            .getAnnualLeaveUseup()) - 0.5) + "");
                }
                workPersonService.updateByPrimaryKeySelective(wps);
            }
        }

    }
	// 执行重启
	@Override
	public void handle(HttpServletRequest request,
					   WorkProcessApply workProcessApply, GlobalResult result)
			throws Exception {
		WorkProcessApply w=workProcessApply;
	    //恢复考勤信息
        WorkProcessApply wp1=workProcessApplyMapper.selectByPrimaryKey(workProcessApply.getId());
        updAttendance(request,wp1,result);
        //删除重启前申请信息
        workProcessApplyMapper.deleteByRedesign(workProcessApply.getId());
        //修改申请状态
        WorkProcessApply wp=selectByPrimaryKey(workProcessApply.getId());
        wp.setStatus("重启审批通过");
        updateByPrimaryKeySelective(wp);
        //更新当前记录
        Map<String, Object> map1 = new HashMap<String, Object>();
        map1.put("processId", workProcessApply.getId());
        WorkProcessHistory wph = workProcessHistoryService.getCurrentNode(map1);
        wph.setOperatorNode("重启结束");
        if (null == workProcessApply.getOpinion()
                || "".equals(workProcessApply.getOpinion())) {
            wph.setOpinion("同意");
        } else {
            wph.setOpinion(workProcessApply.getOpinion());
        }
        wph.setOperatorTime(new Date());
        workProcessHistoryService.updateByPrimaryKeySelective(wph);
        //插入考勤信息
        addAttendance(request,wp,result);
	}

	// 执行变更
	@Override
	public void handleChange(HttpServletRequest request,
							 WorkProcessApply workProcessApply, GlobalResult result)
			throws Exception {
		// TODO Auto-generated method stub
			handleTask(request, workProcessApply, result);
	}

	@Override
	public void handleRepeal(HttpServletRequest request,
							 WorkProcessApply workProcessApply, GlobalResult result)
			throws Exception {
		//更新当前状态记录
		Map<String, Object> map1 = new HashMap<String, Object>();
		map1.put("processId", workProcessApply.getId());
		WorkProcessHistory wph = workProcessHistoryService.getCurrentNode(map1);
		wph.setOperatorNode("销假");
		if (null == workProcessApply.getOpinion()|| "".equals(workProcessApply.getOpinion())) {
			wph.setOpinion("同意");
		} else {
			wph.setOpinion(workProcessApply.getOpinion());
		}
		wph.setOperatorTime(new Date());
		workProcessHistoryService.updateByPrimaryKeySelective(wph);

		//更新请假申请信息及考勤信息
		WorkProcessApply wp=selectByPrimaryKey(workProcessApply.getId());
		WorkProcessApply wp1=workProcessApplyMapper.selectByRedesign(workProcessApply.getId());
//		WorkRegister wr=workRegisterService.selectByLeaveprocess(workProcessApply.getCode());
			//判断是否为重启审批中销假
		if(wp1!=null){
			//注销重启前销假信息
			wp1.setStatus("销假");
			updAttendance(request, wp1, result);
			workProcessApplyMapper.deleteByRedesign(workProcessApply.getId());
			wp1.setId(wp1.getRedesign());
			wp1.setRedesign(null);
			updateByPrimaryKeySelective(wp1);

		}else {
			wp.setStatus("销假");
			updAttendance(request, workProcessApply, result);
			updateByPrimaryKeySelective(wp);
		}
		// 恢复考勤表
		updAttendance(request, workProcessApply, result);

	}

	@Override
	public void rejectTask(HttpServletRequest request,
						   WorkProcessApply workProcessApply, GlobalResult result)
			throws Exception {
		WorkProcessApply wp = selectByPrimaryKey(workProcessApply.getId());
		Map<String, Object> map1 = new HashMap<String, Object>();
		map1.put("processId", workProcessApply.getId());
		WorkProcessHistory wph = workProcessHistoryService.getCurrentNode(map1);
		if (wp.getStatus().equals("重启审批中")) {
			wph.setOperatorNode("重启驳回");
			wp.setStatus("重启驳回");
		} else {
			wph.setOperatorNode("驳回");
			wp.setStatus("驳回");
		}
		// wp.setNextperson(wp.getProposer());
		updateByPrimaryKeySelective(wp);
		if (null == workProcessApply.getOpinion()
				|| "".equals(workProcessApply.getOpinion())) {
			wph.setOpinion("不同意");
		} else {
			wph.setOpinion(workProcessApply.getOpinion());
		}
		wph.setOperatorTime(new Date());
		workProcessHistoryService.updateByPrimaryKeySelective(wph);
	}

	@Override
	public void endTask(HttpServletRequest request,
						WorkProcessApply workProcessApply, GlobalResult result)
			throws Exception {
		SysUser currentUser = shiroUtil.getInstance().currentUser();
		WorkProcessApply wp = selectByPrimaryKey(workProcessApply.getId());
		if(wp.getStatus().equals("重启审批中")){
			Map<String, Object> map1 = new HashMap<String, Object>();
			map1.put("processId", workProcessApply.getId());
			WorkProcessHistory wph = workProcessHistoryService.getCurrentNode(map1);
			wph.setOperatorNode("重启驳回");
			if (null == workProcessApply.getOpinion()
					|| "".equals(workProcessApply.getOpinion())) {
				wph.setOpinion("不同意");
			} else {
				wph.setOpinion(workProcessApply.getOpinion());
			}
			wph.setOperatorTime(new Date());
			workProcessHistoryService.updateByPrimaryKeySelective(wph);
		}
        if(wp.getStatus().equals("重启驳回")) {
            wp = workProcessApplyMapper.selectByRedesign(workProcessApply.getId());
            workProcessApplyMapper.deleteByRedesign(wp.getRedesign());
           	wp.setId(wp.getRedesign());
           	wp.setRedesign(null);
        }
		wp.setStatus("结束");
		int i=updateByPrimaryKeySelective(wp);

		WorkProcessHistory wph = new WorkProcessHistory();
		String id = UUID.randomUUID().toString().replace("-", "");
		wph.setId(id);
		wph.setOperatorId(currentUser.getAccount());
		wph.setOperatorName(currentUser.getName());
		if (null == workProcessApply.getOpinion()
				|| "".equals(workProcessApply.getOpinion())) {
			wph.setOpinion("不同意");
		} else {
			wph.setOpinion(workProcessApply.getOpinion());
		}
		wph.setProcessId(workProcessApply.getId());
		wph.setRelatedId(workProcessApply.getRelatedId());
		wph.setRelatedName(workProcessApply.getRelatedName());
		wph.setOperatorNode("结束");
		wph.setCreateTime(new Date());
		wph.setOperatorTime(new Date());
		wph.setOrderTime(new Date());
		workProcessHistoryService.insertSelective(wph);
	}

	@Override
	public void relevantHandleTask(HttpServletRequest request,
								   WorkProcessApply workProcessApply, GlobalResult result)
			throws Exception {
		//修改请假申请
		Calendar calendar = Calendar.getInstance();
		SysUser currentUser = shiroUtil.getInstance().currentUser();
		WorkProcessApply wp = selectByPrimaryKey(workProcessApply.getId());
		/*SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String leaveTime = request.getParameter("leaveTime");
		String start = leaveTime.substring(0, 10);
		String end = leaveTime.substring(leaveTime.length() - 10,
				leaveTime.length());
		wp.setLeaveStartTime(sdf.parse(start));
		wp.setLeaveEndTime(sdf.parse(end));
		wp.setType(workProcessApply.getType());
		wp.setStatus("审批中");
		wp.setContent(workProcessApply.getContent());
		wp.setMorAftAll(workProcessApply.getMorAftAll());
		updateByPrimaryKeySelective(wp);*/
		updLeave(request,workProcessApply,result,"审批中");

		WorkProcessHistory wph = new WorkProcessHistory();
		String id = UUID.randomUUID().toString().replace("-", "");
		wph.setId(id);
		wph.setOperatorId(currentUser.getAccount());
		wph.setOperatorName(currentUser.getName());
        if (null == workProcessApply.getOpinion()
                || "".equals(workProcessApply.getOpinion())) {
            if(null == workProcessApply.getContent()
                    || "".equals(workProcessApply.getContent())){
                wph.setOpinion("同意");
            }else {
                wph.setOpinion(workProcessApply.getContent());
            }
        } else {
            wph.setOpinion(workProcessApply.getOpinion());
        }
		wph.setProcessId(workProcessApply.getId());
		wph.setRelatedId(workProcessApply.getRelatedId());
		wph.setRelatedName(workProcessApply.getRelatedName());
		wph.setOperatorNode("再次发起");
		wph.setCreateTime(new Date());
		wph.setOperatorTime(new Date());
		calendar.add(Calendar.SECOND, 1);
		wph.setOrderTime(calendar.getTime());
		workProcessHistoryService.insertSelective(wph);
		try {
			Thread.sleep(2000);
		} catch (Exception e) {
			e.printStackTrace();
		}
		WorkProcessHistory wph2 = new WorkProcessHistory();
		String id2 = UUID.randomUUID().toString().replace("-", "");
		wph2.setId(id2);
		SysUser wps = sysUserService.selectByUserAccount(wp.getNextperson());
		wph2.setOperatorId(wps.getAccount());
		wph2.setOperatorName(wps.getName());
		wph2.setProcessId(workProcessApply.getId());
		wph2.setRelatedId(workProcessApply.getRelatedId());
		wph2.setRelatedName(workProcessApply.getRelatedName());
		wph2.setOperatorNode("审批");
		wph2.setCreateTime(new Date());
		wph.setOperatorTime(new Date());
		calendar.add(Calendar.SECOND, 2);
		wph2.setOrderTime(calendar.getTime());
		workProcessHistoryService.insertSelective(wph2);
	}

	@Override
	public void Change(HttpServletRequest request,
					   WorkProcessApply workProcessApply, GlobalResult result)
			throws Exception {
		// TODO Auto-generated method stub

			Calendar calendar = Calendar.getInstance();
			SysUser currentUser = shiroUtil.getInstance().currentUser();
			updLeave(request,workProcessApply,result,"审批中");
			WorkProcessApply wp = selectByPrimaryKey(workProcessApply.getId());
			if (result.getStatus().equals(200)) {

				// 更新当前状态时间
				Map<String, Object> map1 = new HashMap<String, Object>();
				map1.put("processId", workProcessApply.getId());
				WorkProcessHistory wph = workProcessHistoryService.getCurrentNode(map1);
				wph.setOperatorNode("变更发起");
				wph.setRemark(workProcessApply.getRemark());
				wph.setOperatorId(currentUser.getAccount());
				wph.setOperatorName(currentUser.getName());
                if (null == workProcessApply.getOpinion()
                        || "".equals(workProcessApply.getOpinion())) {
                    if(null == workProcessApply.getContent()
                            || "".equals(workProcessApply.getContent())){
                        wph.setOpinion("同意");
                    }else {
                        wph.setOpinion(workProcessApply.getContent());
                    }
                } else {
                    wph.setOpinion(workProcessApply.getOpinion());
                }
				wph.setOperatorTime(new Date());
				workProcessHistoryService.updateByPrimaryKeySelective(wph);
				try {
					Thread.sleep(2000);
				} catch (Exception e) {
					e.printStackTrace();
				}
				WorkProcessHistory wph2 = new WorkProcessHistory();
				String id2 = UUID.randomUUID().toString().replace("-", "");
				wph2.setId(id2);
				SysUser wps = sysUserService.selectByUserAccount(wp.getNextperson());
				wph2.setOperatorId(wps.getAccount());
				wph2.setOperatorName(wps.getName());
				wph2.setProcessId(workProcessApply.getId());
				wph2.setRelatedId(workProcessApply.getRelatedId());
				wph2.setRelatedName(workProcessApply.getRelatedName());
				wph2.setOperatorNode("变更审批");
				wph2.setCreateTime(new Date());
				// wph.setOperatorTime(new Date());
				calendar.add(Calendar.SECOND, 2);
				wph2.setOrderTime(calendar.getTime());
				workProcessHistoryService.insertSelective(wph2);
			}
	}

	public void repeal(HttpServletRequest request,
					   WorkProcessApply workProcessApply, GlobalResult result)
			throws Exception {
		Calendar calendar = Calendar.getInstance();
		SysUser currentUser = shiroUtil.getInstance().currentUser();
		WorkProcessApply wp = selectByPrimaryKey(workProcessApply.getId());
		// SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
		// String leaveTime=request.getParameter("leaveTime");
		// String start=leaveTime.substring(0, 10);
		// String end=leaveTime.substring(leaveTime.length()-10,
		// leaveTime.length());
		// wp.setLeaveStartTime(sdf.parse(start));
		// wp.setLeaveEndTime(sdf.parse(end));

		// 更新当前状态时间
		if (wp.getStatus().equals("审批中")||wp.getStatus().equals("重启审批中")) {
			Map<String, Object> map1 = new HashMap<String, Object>();
			map1.put("processId", workProcessApply.getId());
			WorkProcessHistory wph1 = workProcessHistoryService.getCurrentNode(map1);
			wph1.setOperatorNode("销假发起");
            if (null == workProcessApply.getOpinion()
                    || "".equals(workProcessApply.getOpinion())) {
                if(null == workProcessApply.getContent()
                        || "".equals(workProcessApply.getContent())){
                    wph1.setOpinion("同意");
                }else {
                    wph1.setOpinion(workProcessApply.getContent());
                }
            } else {
                wph1.setOpinion(workProcessApply.getOpinion());
            }
			wph1.setOperatorTime(new Date());
			workProcessHistoryService.updateByPrimaryKeySelective(wph1);
		} else {
			WorkProcessHistory wph = new WorkProcessHistory();
			String id = UUID.randomUUID().toString().replace("-", "");
			wph.setId(id);
			wph.setOperatorId(currentUser.getAccount());
			wph.setOperatorName(currentUser.getName());
            if (null == workProcessApply.getOpinion()
                    || "".equals(workProcessApply.getOpinion())) {
                if(null == workProcessApply.getContent()
                        || "".equals(workProcessApply.getContent())){
                    wph.setOpinion("同意");
                }else {
                    wph.setOpinion(workProcessApply.getContent());
                }
            } else {
                wph.setOpinion(workProcessApply.getOpinion());
            }
			wph.setProcessId(workProcessApply.getId());
			wph.setRelatedId(workProcessApply.getRelatedId());
			wph.setRelatedName(workProcessApply.getRelatedName());
			wph.setOperatorNode("销假发起");
			wph.setCreateTime(new Date());
			wph.setOperatorTime(new Date());
			calendar.add(Calendar.SECOND, 1);
			wph.setOrderTime(calendar.getTime());
			workProcessHistoryService.insertSelective(wph);
		}
		try {
			Thread.sleep(2000);
		} catch (Exception e) {
			e.printStackTrace();
		}

		wp.setStatus("销假审批中");
		wp.setContent(workProcessApply.getContent());
		wp.setMorAftAll(workProcessApply.getMorAftAll());
		updateByPrimaryKeySelective(wp);

		WorkProcessHistory wph2 = new WorkProcessHistory();
		String id2 = UUID.randomUUID().toString().replace("-", "");
		wph2.setId(id2);
		SysUser wps = sysUserService.selectByUserAccount(wp.getNextperson());
		wph2.setOperatorId(wps.getAccount());
		wph2.setOperatorName(wps.getName());
		wph2.setProcessId(workProcessApply.getId());
		wph2.setRelatedId(workProcessApply.getRelatedId());
		wph2.setRelatedName(workProcessApply.getRelatedName());
		wph2.setOperatorNode("销假审批");
		wph2.setCreateTime(new Date());
		calendar.add(Calendar.SECOND, 2);
		wph2.setOrderTime(calendar.getTime());
		workProcessHistoryService.insertSelective(wph2);
	}

    //修改请假申请
	@Override
	public void updLeave(HttpServletRequest request,
					 WorkProcessApply workProcessApply, GlobalResult result,String st)
			throws Exception {
		String remarkQt = request.getParameter("remarkQt");
		if (null != remarkQt && !"".equals(remarkQt) && !"其他".equals(remarkQt)) {
			workProcessApply.setRemark(remarkQt);
		}
		Calendar calendar = Calendar.getInstance();
		SysUser currentUser = shiroUtil.getInstance().currentUser();
		WorkPerson wp = workPersonService.selectByAccount(workProcessApply.getProposer());
		WorkProcessApply wp1 = selectByPrimaryKey(workProcessApply.getId());
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String leaveTime = request.getParameter("leaveTime");
		String start = leaveTime.substring(0, 10);
		String end = leaveTime.substring(leaveTime.length() - 10,
				leaveTime.length());
		wp1.setLeaveStartTime(sdf.parse(start));
		wp1.setLeaveEndTime(sdf.parse(end));

		if(TimeConflict(wp1)) {
			wp1.setType(workProcessApply.getType());
			wp1.setStatus(st);
			wp1.setContent(workProcessApply.getContent());
			wp1.setMorAftAll(workProcessApply.getMorAftAll());
			Float total = Float.parseFloat(wp.getAnnualLeaveTotal());
			Float usedup = Float.parseFloat(wp.getAnnualLeaveUseup());
			String regYear = start.substring(0, 4);
			String type = workProcessApply.getType();
			// 请假天数
			String startDay = start.substring(8, 10);
			String endDay = end.substring(8, 10);
			int s = Integer.parseInt(startDay);
			int e = Integer.parseInt(endDay);
			List<String> excepdays = new ArrayList<String>();
			WorkCalendar wc = workCalendarService.selectByPrimaryKey(regYear);
			if (null != wc && null != wc.getExcepdays()) {
				excepdays = Arrays.asList(wc.getExcepdays().replaceAll(" ", "")
						.split(","));
			}
			float a = 0;
			for (int i = s; i <= e; i++) {
				String temDate = "";
				if (i < 10) {
					temDate = regYear + "-" + start.substring(5, 7) + "-0" + i + "";
				} else {
					temDate = regYear + "-" + start.substring(5, 7) + "-" + i + "";
				}
				if (!excepdays.contains(temDate)) {
					a++;
				}
			}

			// 判断是半天还是全天
			String morAftAll = workProcessApply.getMorAftAll();
			if ("全天".equals(morAftAll)) {
				wp1.setLeaveDays(a);
			} else {
				wp1.setLeaveDays(a / 2);
				a = a / 2;
			}
			// 判断是否有可休年假
			Float ky = total - usedup;
			if ("年休假".equals(type)) {
				// long days=OrderUtil.getDaySub(start,end);
				if (a > ky) {
					result.setStatus(300);
				} else {
					wp1.setKxnj(ky);
					updateByPrimaryKeySelective(wp1);
					result.setStatus(200);
				}
			} else {
				wp1.setKxnj(ky);
				updateByPrimaryKeySelective(wp1);
				result.setStatus(200);
			}
		}else {
			result.setStatus(400);
		}
	}
	@Override
	public void restartTask(HttpServletRequest request,
							WorkProcessApply workProcessApply, GlobalResult result)
			throws Exception {
			Calendar calendar = Calendar.getInstance();
			SysUser currentUser = shiroUtil.getInstance().currentUser();
			String processId = UUID.randomUUID().toString().replace("-", "");
			WorkProcessApply wph1 = selectByPrimaryKey(workProcessApply.getId());
			wph1.setRedesign(wph1.getId());
			wph1.setId(processId);
			insertSelective(wph1);
			updLeave(request, workProcessApply, result, "重启审批中");
			WorkProcessApply wp = selectByPrimaryKey(workProcessApply.getId());

			if(result.getStatus().equals(200)) {
				WorkProcessHistory wph = new WorkProcessHistory();
				String id = UUID.randomUUID().toString().replace("-", "");
				wph.setId(id);
				wph.setOperatorId(currentUser.getAccount());
				wph.setOperatorName(currentUser.getName());
                if (null == workProcessApply.getOpinion()
                        || "".equals(workProcessApply.getOpinion())) {
                    if(null == workProcessApply.getContent()
                            || "".equals(workProcessApply.getContent())){
                        wph.setOpinion("同意");
                    }else {
                        wph.setOpinion(workProcessApply.getContent());
                    }
                } else {
                    wph.setOpinion(workProcessApply.getOpinion());
                }
				wph.setProcessId(workProcessApply.getId());
				wph.setRelatedId(workProcessApply.getRelatedId());
				wph.setRelatedName(workProcessApply.getRelatedName());
				wph.setOperatorNode("重启发起");
				wph.setCreateTime(new Date());
				wph.setOperatorTime(new Date());
				calendar.add(Calendar.SECOND, 1);
				wph.setOrderTime(calendar.getTime());
				workProcessHistoryService.insertSelective(wph);
				try {
					Thread.sleep(2000);
				} catch (Exception e) {
					e.printStackTrace();
				}
				WorkProcessHistory wph2 = new WorkProcessHistory();
				String id2 = UUID.randomUUID().toString().replace("-", "");
				wph2.setId(id2);
				SysUser wps = sysUserService.selectByUserAccount(wp.getNextperson());
				wph2.setOperatorId(wps.getAccount());
				wph2.setOperatorName(wps.getName());
				wph2.setProcessId(workProcessApply.getId());
				wph2.setRelatedId(workProcessApply.getRelatedId());
				wph2.setRelatedName(workProcessApply.getRelatedName());
				wph2.setOperatorNode("重启审批");
				wph2.setCreateTime(new Date());
				calendar.add(Calendar.SECOND, 2);
				wph2.setOrderTime(calendar.getTime());
				workProcessHistoryService.insertSelective(wph2);
			}
	}

	public Boolean TimeConflict(WorkProcessApply workProcessApply){
		Boolean b=null;
		List<WorkProcessApply> list=workProcessApplyMapper.TimeConflict(workProcessApply);
		if (list.size()!=0){
			b=false;
		}else {
			b=true;
		}
		return b;
	}

}
