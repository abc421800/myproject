package com.cost168.costaudit.controller.work;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cost168.costaudit.pojo.sys.SysUser;
import com.cost168.costaudit.pojo.work.WorkEnterprise;
import com.cost168.costaudit.pojo.work.WorkPersonExample;
import com.cost168.costaudit.pojo.work.WorkPersonExample.Criteria;
import com.cost168.costaudit.service.work.WorkEnterpriseService;
import com.cost168.costaudit.service.work.WorkPersonService;
import com.cost168.costaudit.shiro.shiroUtil;
import com.cost168.costaudit.utils.EUDataGridResult;
import com.cost168.costaudit.utils.GlobalResult;
import com.cost168.costaudit.utils.JsonUtils;

@Controller
@RequestMapping("/workEnterprise")
public class WorkEntrpriseController {
	
	@Autowired
	private WorkEnterpriseService workEnterpriseService;
	@Autowired
	private WorkPersonService workPersonService;
	
	@ResponseBody
	@RequestMapping("/list")
	public EUDataGridResult list(HttpServletRequest request,WorkEnterprise workEnterprise, int page, int rows) {
		EUDataGridResult result=new EUDataGridResult();
		Map<String,Object> map=new HashMap<String,Object>();
		try {
			Map<String,Object> selectMap=JsonUtils.object2Map(workEnterprise);
		    String startTime =request.getParameter("startTime");
			String endTime =request.getParameter("endTime");
			if(null!=startTime && !"".equals(startTime)){
				map.put("startTime", startTime+" 00:00:00");
			}
			if(null!=endTime && !"".equals(endTime)){
				map.put("endTime", endTime+" 24:00:00");
			}
			map.putAll(selectMap);
			List<WorkEnterprise> list= workEnterpriseService.selectListByMap(map);
		    int total= workEnterpriseService.selectCountByMap(map);
			result.setRows(list);
			result.setTotal(total);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	
	@RequestMapping("/toEdit")
	public String toEdit(HttpServletRequest request){
		String url="";
		String id=request.getParameter("id");
		if(null!=id && !"".equals(id)) {
			url="/workEnterprise/upd";
			WorkEnterprise workEnterprise = workEnterpriseService.selectByPrimaryKey(id);
			Map<String,Object> map=new HashMap<String, Object>();
			map.put("enterpriseId", id);
			int sendPersonCount=workPersonService.selectCountByMap(map);
			map.put("effectiveFlag", "有效");
			int sendPersonEffectiveCount=workPersonService.selectCountByMap(map);
			workEnterprise.setSendPerson(sendPersonCount);
			workEnterprise.setSendPersonEffective(sendPersonEffectiveCount);
			request.setAttribute("add_edit", "edit");
			request.setAttribute("obj", workEnterprise);
		}else{
			SysUser currentUser=shiroUtil.getInstance().currentUser();
			url="/workEnterprise/save";
			String enterpriseId=UUID.randomUUID().toString().replace("-", "");
			WorkEnterprise workEnterprise=new WorkEnterprise();
			workEnterprise.setId(enterpriseId);
			workEnterprise.setCreater(currentUser.getName());
			request.setAttribute("add_edit", "add");
			request.setAttribute("obj", workEnterprise);
		}
		request.setAttribute("url", url);
		return "workEnterprise/add";
	}
	
	@ResponseBody
	@RequestMapping("/save")
	public GlobalResult save(HttpServletRequest request,WorkEnterprise workEnterprise){
		GlobalResult result=new GlobalResult();
		try {
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
			if(null!=workEnterprise.getServiceStartStr() && !"".equals(workEnterprise.getServiceStartStr())){
				workEnterprise.setServiceStart(sdf.parse(workEnterprise.getServiceStartStr()));
			}
			if(null!=workEnterprise.getServiceEndStr() && !"".equals(workEnterprise.getServiceEndStr())){
				workEnterprise.setServiceEnd(sdf.parse(workEnterprise.getServiceEndStr()));
			}
			SysUser user= shiroUtil.getInstance().currentUser();
			String id = UUID.randomUUID().toString().replace("-", "");
			workEnterprise.setId(id);
			workEnterprise.setCreateTime(new Date());
			workEnterprise.setCreater(user.getName());
			workEnterpriseService.insertSelective(workEnterprise);
			result.setStatus(200);
		} catch (Exception e) {
			e.printStackTrace();
			result.setStatus(500);
		}
		return result;
	}
	
	@ResponseBody
	@RequestMapping("/upd")
	public GlobalResult upd(HttpServletRequest request,WorkEnterprise workEnterprise){
		GlobalResult result=new GlobalResult();
		try {
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
			if(null!=workEnterprise.getServiceStartStr() && !"".equals(workEnterprise.getServiceStartStr())){
				workEnterprise.setServiceStart(sdf.parse(workEnterprise.getServiceStartStr()));
			}
			if(null!=workEnterprise.getServiceEndStr() && !"".equals(workEnterprise.getServiceEndStr())){
				workEnterprise.setServiceEnd(sdf.parse(workEnterprise.getServiceEndStr()));
			}
			workEnterprise.setCreateTime(new Date());
			workEnterpriseService.updateByPrimaryKeySelective(workEnterprise);
			result.setStatus(200);
		} catch (Exception e) {
			e.printStackTrace();
			result.setStatus(500);
		}
		return result;
	}
	
	@ResponseBody
	@RequestMapping("/del")
	public GlobalResult del(HttpServletRequest request){
		GlobalResult result=new GlobalResult();
		String ids=request.getParameter("ids");
		String arr[]=ids.split(",");
		try {
			for(String i:arr){
				workEnterpriseService.deleteByPrimaryKey(i);
				WorkPersonExample example=new WorkPersonExample();
				Criteria  criteria=	example.createCriteria();
				criteria.andEnterpriseIdEqualTo(i);
				workPersonService.deleteByExample(example);
			}
			result.setStatus(200);
		} catch (Exception e) {
			e.printStackTrace();
			result.setStatus(500);
		}
		return result;
	}

}
