package com.cost168.costaudit.controller.work;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import com.cost168.costaudit.pojo.sys.SysRole;
import com.cost168.costaudit.pojo.sys.SysUser;
import com.cost168.costaudit.pojo.work.WorkEnterprise;
import com.cost168.costaudit.pojo.work.WorkPerson;
import com.cost168.costaudit.pojo.work.WorkProcessApply;
import com.cost168.costaudit.pojo.work.WorkProcessHistory;
import com.cost168.costaudit.service.sys.SysRoleService;
import com.cost168.costaudit.service.sys.SysUserRoleService;
import com.cost168.costaudit.service.sys.SysUserService;
import com.cost168.costaudit.service.work.WorkEnterpriseService;
import com.cost168.costaudit.service.work.WorkPersonService;
import com.cost168.costaudit.service.work.WorkProcessApplyService;
import com.cost168.costaudit.service.work.WorkProcessHistoryService;
import com.cost168.costaudit.shiro.shiroUtil;
import com.cost168.costaudit.utils.EUDataGridResult;
import com.cost168.costaudit.utils.ExcelUtil;
import com.cost168.costaudit.utils.Global;
import com.cost168.costaudit.utils.GlobalResult;
import com.cost168.costaudit.utils.JsonUtils;
import com.cost168.costaudit.utils.OrderUtil;


/**
 *
 * ClassName: WorkProcessApplyController
 * @Description: TODO
 * @author lixiang
 * @date 2019-5-30上午10:27:41
 * @Company  广东华联软件科技有限公司
 */


@Controller
@RequestMapping("/workProcessApply")
public class WorkProcessApplyController {

	@Autowired
	private WorkProcessApplyService workProcessApplyService;
	@Autowired
	private WorkProcessHistoryService workProcessHistoryService;
	@Autowired
	private WorkPersonService workPersonService;
	@Autowired
	private WorkEnterpriseService workEnterpriseService;
	@Autowired
	private SysUserService sysUserService;
	@Autowired
	private SysUserRoleService sysUserRoleService;
	@Autowired
	private SysRoleService sysRoleService;

	private WorkProcessApply wpal;

	public WorkProcessApply getWorkProcessApply() {
		return wpal;
	}

	public void setWorkProcessApply(WorkProcessApply workProcessApply) {
		this.wpal = workProcessApply;
	}

	@ResponseBody
	@RequestMapping("/list")
	public EUDataGridResult list(HttpServletRequest request,WorkProcessApply workProcessApply, int page, int rows) {
		EUDataGridResult result=new EUDataGridResult();
		try {
			Map<String,Object> map=new HashMap<String,Object>();
			String startTime =request.getParameter("startTime");
			String endTime =request.getParameter("endTime");
			if(null!=startTime && !"".equals(startTime)){
				map.put("startTime", startTime+" 00:00:00");
			}
			if(null!=endTime && !"".equals(endTime)){
				map.put("endTime", endTime+" 24:00:00");
			}
			SysUser currentUser=shiroUtil.getInstance().currentUser();
			String roleId=sysUserRoleService.selectRoleByUserId(currentUser.getId());
			SysRole role=sysRoleService.selectByPrimaryKey(roleId);
			if(null!=role && !"超级管理员".equals(role.getName())){
				map.put("personAll", currentUser.getAccount());
			}
			//String flag=request.getParameter("flag");
			Map<String,Object> selectMap=JsonUtils.object2Map(workProcessApply);
			map.putAll(selectMap);
			map.put("isPage", true);
			map.put("curPage", rows*(page-1));
			map.put("pageSize", rows);
			/*if(flag!=null){
	  			 if(flag.equals("apply")){
	  		  	    if(currentUser!=null){
	  		  	    	map.put("proposer", currentUser.getAccount());
	  		  	    }
	  		    }else if(flag.equals("task")){
	  		    	map.put("nextPerson", currentUser.getAccount());
	  		    	map.put("status", "审批中");
	  		    }
	  		}*/
			List<WorkProcessApply> list= workProcessApplyService.selectListByMap(map);
			Global.PROCESS_EXPORT_LIST=list;
			int total= workProcessApplyService.selectCountByMap(map);
			result.setRows(list);
			result.setTotal(total);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	@ResponseBody
	@RequestMapping("/recodList")
	public EUDataGridResult recodList(HttpServletRequest request, int page, int rows) {
		EUDataGridResult result=new EUDataGridResult();
		String id=request.getParameter("id");
		try {
			Map<String,Object> map=new HashMap<String, Object>();
			map.put("processId", id);
			List<WorkProcessHistory> wphList= workProcessHistoryService.selectListByMap(map);
			if(null!=wphList && wphList.size()>0){
				for(WorkProcessHistory wph:wphList){
					if(null!=wph.getCreateTime() && null!=wph.getOperatorTime()){
						Date d1 = wph.getCreateTime();
						Date d2 = wph.getOperatorTime();
						long diff = d2.getTime() - d1.getTime();//这样得到的差值是微秒级别
						long days = diff / (1000 * 60 * 60 * 24);
						long hours = (diff-days*(1000 * 60 * 60 * 24))/(1000* 60 * 60);
						long minutes = (diff-days*(1000 * 60 * 60 * 24)-hours*(1000* 60 * 60))/(1000* 60);
						System.out.println(""+days+"天"+hours+"小时"+minutes+"分");
						wph.setConsumeTime(""+days+"天"+hours+"小时"+minutes+"分");
					}
				}
			}
			result.setRows(wphList);
			result.setTotal(wphList.size());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	@RequestMapping("/toEdit")
	public String toEdit(HttpServletRequest request){

		try {
			SysUser currentUser=shiroUtil.getInstance().currentUser();
			String url="";
			String id=request.getParameter("id");
			if(null!=id && !"".equals(id)) {
				url="/workProcessApply/upd";
				WorkProcessApply wp = workProcessApplyService.selectByPrimaryKey(id);
				request.setAttribute("add_edit", "edit");
				request.setAttribute("obj", wp);
			}else{
				WorkPerson workPerson=workPersonService.selectByAccount(currentUser.getAccount());
				WorkEnterprise  workEnterprise =workEnterpriseService.selectByPrimaryKey(workPerson.getEnterpriseId());
				url="/workProcessApply/save";
				String processId=UUID.randomUUID().toString().replace("-", "");
				WorkProcessApply wp=new WorkProcessApply();
				wp.setId(processId);
				wp.setProposer(currentUser.getAccount());
				wp.setProposerName(currentUser.getName());
				String code=OrderUtil.buildOrderId("");
				wp.setCode(code);
				if(null!=workEnterprise){
					wp.setEnterpriseId(workEnterprise.getId());
					wp.setEnterpriseName(workEnterprise.getName());
				}
				request.setAttribute("add_edit", "add");
				request.setAttribute("obj", wp);
				request.setAttribute("workPerson", workPerson);
			}
			request.setAttribute("url", url);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "processApply/add";
	}

	@ResponseBody
	@RequestMapping("/checkPerson")
	public GlobalResult checkPerson(HttpServletRequest request){
		GlobalResult result=new GlobalResult();
		try {
			SysUser currentUser=shiroUtil.getInstance().currentUser();
			WorkPerson workPerson=workPersonService.selectByAccount(currentUser.getAccount());
			if(null!=workPerson){
				result.setStatus(200);
			}else{
				result.setStatus(500);
			}
		} catch (Exception e) {
			e.printStackTrace();
			result.setStatus(500);
		}
		return result;
	}

	@ResponseBody
	@RequestMapping("/save")
	public GlobalResult save(HttpServletRequest request,WorkProcessApply workProcessApply){
		GlobalResult result=new GlobalResult();
		try {
			workProcessApplyService.save(request,workProcessApply,result);
		} catch (Exception e) {
			result.setStatus(500);
			e.printStackTrace();
		}
		return result;
	}



	@RequestMapping("/toTaskDetails")
	public String toTaskDetails(HttpServletRequest request){
		try {
			String id=request.getParameter("id");
			taskDetails(request,id);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "processApply/taskDetails";
	}

	@RequestMapping("/restartDetails")
	public String restartDetails(HttpServletRequest request){
		try {
			String id=request.getParameter("id");
			taskDetails(request,id);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "processApply/restartDetails";
	}

	@RequestMapping("/restartRFLDetails")
	public String restartRFLDetails(HttpServletRequest request){
		try {
			String id=request.getParameter("id");
			taskDetails(request,id);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "processApply/restartRFLDetails";
	}

	@RequestMapping("/restartChangeDetails")
	public String restartChangeDetails(HttpServletRequest request){
		try {
			String id=request.getParameter("id");
			taskDetails(request,id);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "processApply/restartChangeDetails";
	}

	@RequestMapping("/toTaskDetailsShow")
	public String toTaskDetailsShow(HttpServletRequest request){
		String id=request.getParameter("id");
		taskDetails(request,id);
		return "processApply/taskDetailsShow";

	}

	@RequestMapping("/toTaskDetailsRelevant")
	public String toTaskDetailsRelevant(HttpServletRequest request){
		String id=request.getParameter("id");
		taskDetails(request,id);
		return "processApply/taskRelevant";

	}
	private void taskDetails(HttpServletRequest request,String id) {
		WorkProcessApply wp=workProcessApplyService.selectByPrimaryKey(id);
		WorkPerson workPerson=workPersonService.selectByAccount(wp.getProposer());
		if(null!=workPerson){
			wp.setProposerName(workPerson.getName());
			WorkEnterprise  workEnterprise =workEnterpriseService.selectByPrimaryKey(workPerson.getEnterpriseId());
			if(null!=workEnterprise){
				wp.setEnterpriseId(workEnterprise.getId());
				wp.setEnterpriseName(workEnterprise.getName());
			}
		}
		SysUser userSp=sysUserService.getUserByAccount(wp.getNextperson());
		if(null!=userSp){
			wp.setNextpersonName(userSp.getName());
		}
		SysUser userCy=sysUserService.getUserByAccount(wp.getRelatedId());
		if(null!=userCy){
			wp.setRelatedName(userCy.getName());
		}
		request.setAttribute("workPerson", workPerson);
		request.setAttribute("obj", wp);
	}

	/**
	 *
	 * @Description: 任务办理、审批
	 * @param @param request
	 * @param @param workProcessApply
	 * @param @return
	 * @return GlobalResult
	 * @throws
	 * @author lixiang
	 * @date 2019-5-31下午3:12:00
	 * @Company  广东华联软件科技有限公司
	 */
	@ResponseBody
	@RequestMapping("/handleTask")
	public GlobalResult handleTask(HttpServletRequest request,WorkProcessApply workProcessApply){
		GlobalResult result=new GlobalResult();
		WorkProcessApply n=workProcessApplyService.selectByPrimaryKey(workProcessApply.getId());
		try {
			if(n.getStatus().equals("销假审批中")){
				workProcessApplyService.handleRepeal(request, workProcessApply, result);
			}else if(n.getStatus().equals("变更审批中")){
				workProcessApplyService.handleChange(request,workProcessApply,result);
			}else if(n.getStatus().equals("重启审批中")){
				workProcessApplyService.handle(request,workProcessApply,result);
			}else{
				workProcessApplyService.handleTask(request,workProcessApply,result);
			}
			result.setStatus(200);
		} catch (Exception e) {
			result.setStatus(500);
			e.printStackTrace();
		}
		return result;
	}

	/**
	 *
	 * @Description: 驳回任务再次提交
	 * @param @param request
	 * @param @param workProcessApply
	 * @param @return
	 * @return GlobalResult
	 * @throws
	 * @author lixiang
	 * @date 2019-6-3上午11:54:12
	 * @Company  广东华联软件科技有限公司
	 */
	@ResponseBody
	@RequestMapping("/relevantHandleTask")
	public GlobalResult relevantHandleTask(HttpServletRequest request,WorkProcessApply workProcessApply){
		GlobalResult result=new GlobalResult();
		try {
			workProcessApplyService.relevantHandleTask(request,workProcessApply,result);
			result.setStatus(200);
		} catch (Exception e) {
			result.setStatus(500);
			e.printStackTrace();
		}
		return result;
	}
	/**
	 *
	 * @Description: 重启
	 * @param @param request
	 * @param @param workProcessApply
	 * @param @return
	 * @return GlobalResult
	 * @throws
	 * @author lixiang
	 * @date 2019-8-20下午2:21:18
	 * @Company  广东华联软件科技有限公司
	 */
	@ResponseBody
	@RequestMapping("/restartTask")
	public GlobalResult restartTask(HttpServletRequest request,WorkProcessApply workProcessApply){
		GlobalResult result=new GlobalResult();
		try {
			workProcessApplyService.restartTask(request,workProcessApply,result);
			result.setStatus(200);
		} catch (Exception e) {
			result.setStatus(500);
			e.printStackTrace();
		}
		return result;
	}
	/**
	 *
	 * @Description: 变更
	 * @param @param request
	 * @param @param workProcessApply
	 * @param @return
	 * @return GlobalResult
	 * @throws
	 * @author
	 * @date 2019-8-20下午2:21:18
	 * @Company  广东华联软件科技有限公司
	 */
	@ResponseBody
	@RequestMapping("/Change")
	public GlobalResult Change(HttpServletRequest request,WorkProcessApply workProcessApply){;
		GlobalResult result=new GlobalResult();
		try {
			workProcessApplyService.Change(request,workProcessApply,result);
			result.setStatus(200);
		} catch (Exception e) {
			result.setStatus(500);
			e.printStackTrace();
		}
		return result;
	}
	/**
	 *
	 * @Description: 销假
	 * @param @param request
	 * @param @param workProcessApply
	 * @param @return
	 * @return GlobalResult
	 * @throws
	 * @author
	 * @date 2019-8-20下午2:21:18
	 * @Company  广东华联软件科技有限公司
	 */
	@ResponseBody
	@RequestMapping("/repeal")
	public GlobalResult repeal(HttpServletRequest request,WorkProcessApply workProcessApply){
		GlobalResult result=new GlobalResult();
		try {
			workProcessApplyService.repeal(request,workProcessApply,result);
			result.setStatus(200);
		} catch (Exception e) {
			result.setStatus(500);
			e.printStackTrace();
		}
		return result;
	}

	/**
	 *
	 * @Description: 驳回
	 * @param @param request
	 * @param @param workProcessApply
	 * @param @return   
	 * @return GlobalResult
	 * @throws
	 * @author lixiang
	 * @date 2019-5-31下午5:31:46
	 * @Company  广东华联软件科技有限公司
	 */
	@ResponseBody
	@RequestMapping("/rejectTask")
	public GlobalResult rejectTask(HttpServletRequest request,WorkProcessApply workProcessApply){
		GlobalResult result=new GlobalResult();
		try {
			workProcessApplyService.rejectTask(request,workProcessApply,result);
			result.setStatus(200);
		} catch (Exception e) {
			result.setStatus(500);
			e.printStackTrace();
		}
		return result;

	}

	/**
	 *
	 * @Description: 结束
	 * @param @param request
	 * @param @param workProcessApply
	 * @param @return   
	 * @return GlobalResult
	 * @throws
	 * @author lixiang
	 * @date 2019-6-3上午11:34:48
	 * @Company  广东华联软件科技有限公司
	 */
	@ResponseBody
	@RequestMapping("/endTask")
	public GlobalResult endTask(HttpServletRequest request,WorkProcessApply workProcessApply){
		GlobalResult result=new GlobalResult();
		try {
			workProcessApplyService.endTask(request,workProcessApply,result);
			result.setStatus(200);
		} catch (Exception e) {
			result.setStatus(500);
			e.printStackTrace();
		}
		return result;

	}

	//导出
	@ResponseBody
	@RequestMapping("/exportWorkProcess")
	public void exportWorkProcess(HttpServletRequest request, HttpServletResponse response) {
		try {
			List<WorkProcessApply> list = Global.PROCESS_EXPORT_LIST;
			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
			String dateString = formatter.format(new Date());
			String path = request.getSession().getServletContext().getRealPath("/template/report/请假申请单.xlsx");
			String newPath = request.getSession().getServletContext().getRealPath("/template/temp/请假申请单导出_导出日期_" + dateString + ".xlsx");
			Map<String, List<List<String>>> date = new HashMap<String, List<List<String>>>();
			List<List<String>> rowList = new ArrayList<List<String>>();
			List<String> cellList = new ArrayList<String>();
			for (WorkProcessApply l : list) {
				cellList = new ArrayList<String>();
				cellList.add(l.getCode());
				cellList.add(l.getProposerName());
				cellList.add(l.getEnterpriseName());
				cellList.add(l.getStatus());
				cellList.add(l.getProPhone());
				String nj=l.getKxnj()+"";
				cellList.add(nj.replace(".0", ""));
				cellList.add(l.getType());
				cellList.add(l.getLeaveStartTimeStr());
				cellList.add(l.getLeaveEndTimeStr());
				long days=0;
				if(null!=l.getLeaveStartTimeStr()&&null!=l.getLeaveEndTimeStr()){
					days=OrderUtil.getDaySub(l.getLeaveStartTimeStr(),l.getLeaveEndTimeStr());
				}
				cellList.add(days+"");
				cellList.add(l.getCreateTimeStr());
				cellList.add(l.getNextpersonName());
				cellList.add(l.getRelatedName());
				rowList.add(cellList);
			}
			date.put("请假单", rowList);
			ExcelUtil.copyExcel(1, date, path, newPath, request, response);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

}
